

# 클라우드 시스템 : 필요할때만 시스템을 이용하는 것, 시스템 구축에 필요한 네트워크/서버/스토리지/애플리케이션을 서비스로써 제공.
-서비스 종류
1) IaaS ( Infrastructure as a Service ) : 서버나 OS,네트워크를 제공하는 서비스, 데이터를 저장하는 영역.
2) PaaS ( Platform as a Service ) : 하드웨어 외 개발환경 등의 미들웨어를 제공.
3) SaaS ( Software as a Service ) : 이미 완성된 기능이나 서비스를 그대로 제공, 클라우드 벤더(Vendor)가 제공.
4) DaaS ( Desktop as a Service ) : IT 지원을 위한 다운타임 감소, 비용 절감, 기기 우연성 향상, 보안 개선, 신속하게 활성.

# 클라우드 단점 : 매우 높은 가용성이 요구되는 경우/ 저장 위치를 명확히 하지않으면 안되는 데이터를 취급 X / 
                 특수하고 드문 요건이 있을 경우 이용할수 없음 / 전체비용이 높아지면  온프레미스형태로 구축하는것이 경제적.

# 클라우드 퍼스트 : 시스템의 설계와 이행 때 클라우드 서비스 적용을 제일 먼저 검토하는 방침.
# 클라우드 서비스의 활용 사례
-빅 데이터(대량 데이터와 리소스)
-업무 시스템
-모바일 앱의 벡 엔드 기능
-재해 복구 시스템( RTO:목표 복구시간 / RPO:복구시점 목표 )

# 클라우드 벤더 : 시스템이나 솔루션을 개발해 판매하고 유지-보수하는 과정에서 이익을 창출.(하드웨어기업과 소프트웨어 솔루션 판매업자)

# 시스템에 요구되는 조건 2가지
-기능 요건   : 시스템 기능으로서 요구되는 조건 / 시스템이나 소프트웨어로 무엇을 할 수 있는지를 정리한 것.
-비기능 요건 : 시스템 성능 및 신뢰성과 확장성, 유지-보수성/보안 등과 관련된 요건으로, 기능 이외의 요건.

# 시스템 기반 : 애플리케이션을 사용자가 24시간 365일 이용하도록 환경 뒷받침하는 기술요소.

# 스케일 아웃 : 동일한 구성의 Web 서버를 병렬로 여러 대 가동시켜서 부하를 분산시키는 방법.

# 인프라 아키텍처 : 애플리케이션을 가동시키기 위해서는 다양한 서버에 기능이나 역할을 분배하고, 인프라 전체 구성환경을 정의함.(=컴퓨터구성방식)
- 시스템 통합 사업자와 하드웨어벤더, 클라우드 벤더, 네트워크 벤더 등 연계되어 서브시스템/기능 단위로 시스템을 구축.
- IT 아키텍트를 중심으로 전체 인프라 기반의 처리방식을 결정.

# 인프라 : 어떤 기반을 형성하는 기초적인 시설, 시스템이다. 교통 인프라라고 하면 교통의 기반이 되는 시설들-도로, 항만, 철도 등을 말한다.
# IT 인프라는 IT 의 기반이 되는 것으로 컴퓨터로 구성된다. IT 인프라를 어떻게 구성할지에 대한 구조를 IT 인프라 아키텍처라고 한다.
# 아키텍처는 여러 가지가 있으며 각각 장단점이 존재한다. 따라서 가장 좋은 '궁극의, 최적의 아키텍처' 는 없다.
# 특히 현장에서는 비용적인 문제가 고려되어야 하기 때문에 예산 내에서, 상황에 따라 장점을 최대한 살리고 단점을 최소화하도록 설계하는 것이 중요하다.
# IT 인프라 아키텍처의 기본적인 방식에는 집약형과 분할형이 있다.

##집약형
- 컴퓨터 한 대로 주요 업무를 처리하기 때문에 장비 고장 등으로 업무가 중단되지 않도록 다중화 기법을 적용한다.
- 대형 컴퓨터를 구성하는 주요 부품을 여러대 두어서 한 대가 고장나더라도 다른 장비가 동작하며 중단되지 않도록 하는 기법이다. 
- 또 다수의 서로 다른 업무를 동시에 처리하기 위해 유한 리소스 관리를 하여 고부하 처리가 다른 처리에 영향을 주지 않도록 되어 있다.
*장점
- 한 대의 대형 컴퓨터만 있으면 되므로 구성이 간단하다.
- 대형 컴퓨터의 다중화, 리소스 관리에 의해 안정성이 높고 고성능이다.
*단점
- 대형 컴퓨터 추가 도입 및 유지 비용이 비싸다
- 따라서 확장성에 한계가 있다.

##분할형
- 다수의 소형 컴퓨터를 연결하여 대형 컴퓨터가 했던 업무를 분할 처리하는 구성이다. 다중화처럼 한 대가 고장나도 다른 컴퓨터를 이용해 안정성을 담보하고 있다. 
- 또 대형 컴퓨터는 특정 OS나 개발 언어를 사용하지만, 소형 컴퓨터는 표준 OS나 개발 언어를 사용하기 때문에 오픈 시스템이라고도 부르고,
- 여러 대의 컴퓨터를 연결했다는 의미에서 분산 시스템이라고도 부른다. 
- 분할형 아키텍처에서 이용되는 소형 컴퓨터를 서버라고 한다. 서버는 컴퓨터 자체를 가리키거나 이 컴퓨터에서 돌아가는 소프트웨어를 가리키는 경우도 있다. 
- 컴퓨터 자체를 가리키는 경우를 물리 서버, 소프트웨어를 가리키는 경우를 논리 서버라고 한다.
*장점
- 낮은 비용으로 시스템을 구축할 수 있음. (많게는 100배 차이가 난다고 함.)
- 따라서 서버 대수를 쉽게 늘릴 수 있으니 확장성이 높다.
*단점
- 대수가 늘어나면 관리구조가 복잡해진다.
- 전부 연결되어 있으므로 한 대가 망가지면 영향 범위를 최소화하기 위한 서버별 역할 및 구조를 검토해야 한다.

# 서버별 역할을 분할하는 일반적인 방식으로는 수직형과 수평형이 있다. 수직형은 특정 서버 측면에서 봤을 때 역할에 따라 위, 아래 계층으로 나뉘고 수직적으로 확장된다. 
# 다른 처리를 하는 서버를 여러대 두는 것이다. 수평형은 용도가 같은 서버를 수평적으로 확장하는 것이다. 
# 이렇게 하면 한 대가 전체 시스템에 주는 영향이 감소하여 안정성이 향상되며 처리를 담당하는 서버 대수가 늘어나니 전체적인 성능도 향상된다. 보통 어느 하나를 골라 쓰기보다 두 가지 방식을 함께 채택하고 있다.


# 클라이언트-서버형 아키텍처 (2-tier)
- 수직분할형의 한 예로 업무 애플리케이션, 미들웨어, 데이터베이스 등의 소프트웨어가 물리 서버 상에서 운영되고
- 클라이언트 또는 단말이라고 불리는 소형 컴퓨터가 이 서버에 접속해 이용하는 형태다. 클라이언트에는 PC, 스마트폰, 태블릿 등이 있다.
- 클라이언트는 서버에 접속하기 위해 전용 소프트웨어를 설치해야 한다. 추후 업무 애플리케이션이 업데이트될 때마다 이 소프트웨어도 업데이트해야한다. 
- 이용자 측면에서도 불편하고, 이용자가 반드시 업데이트한다는 보장이 없으니 서버 측에서도 위험 요소가 될 수 있다.
- 또 서버에 처리가 집중되므로 확장성에 한계가 발생할 수 있다. 이를 개선한 것이 3계층형(3-rier) 이다.
*장점
- 클라이언트 측에서 많은 처리를 실행할 수 있어 소수의 서버로 다수의 클라이언트를 처리할 수 있다.
*단점
- 클라이언트 측의 소프트웨어 정기 업데이트가 필요하다.
- 서버에 처리가 집중되므로 서버 확장성에 한계가 발생할 수 있다.


# 3계층형 아키텍처 (3-tier)
- 수직 분할형의 한 예로 클라이언트-서버형의 단점을 개선한 것이다. 프레젠테이션 계층, 애플리케이션 계층, 데이터 계층으로 분할되어 있다. 
- 프레젠테이션 계층에서는 사용자의 입력을 받고 화면을 표시한다. 
- 애플리케이션 계층에서는 사용자 요청에 따라 업무 처리를 하며 데이터 계층에서는 애플리케이션의 요청에 따라 데이터 입출력을 한다. 
- 프레젠테이션 계층에 사용되는 서버는 웹서버, 애플리케이션 계층에는 AP 서버, 데이터베이스 계층에는 DB 서버가 있다.
- 3계층에서 사용자는 웹 브라우저를 통해 시스템에 접속한다. 웹 브라우저의 요청을 웹서버에 먼저 전달하고, 웹서버는 별도의 업무 처리가 필요하다면 AP 서버에 요청한다. 
- AP 서버는 업무 처리에 필요한 데이터가 있다면 DB 서버에 입출력을 요청한다.
- 만약 이미지 파일 등의 정적 파일만 요청한 경우라면 웹 서버만으로 처리를 완료할 수 있어 모든 처리가 AP서버나 DB 서버를 이용하지 않아도 된다. 
- 즉, 다른 서버에 부하를 주지 않는다. 이런 식으로 서버의 역할을 분할하여 특정 서버에 부하가 집중되는 문제가 해결된다. 
- 또 사용자는 웹 브라우저만 이용하면 되기 때문에 사용자 업데이트를 할 필요가 없다. 
- 인터넷 사이트, 사내 업무 시스템 등 대부분 3계층 구조를 채용하고 있다.
*장점
- 서버 부하 집중 개선
- 사용자 정기 업데이트 불필요
- 처리 반환에 의한 서버 부하 저감
*단점
- 클라이언트-서버 구성보다 구조가 복잡함






