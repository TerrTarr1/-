# 아키텍트 : 일반적으로 아키텍처를 설계하는 사람.
# 복잡하고 변화가 많은 비즈니즈 환경과 IT 솔루션들에는 다양한 아키텍처가 존재하고 이러한 아키텍처를 설계하는 아키텍트가 존재.

# 아키텍트 종류
1. 솔루션 아키텍트(Solution Architect, SA) : 프로젝트 내에 개발팀이 있을 때, 해당 솔루션을 사용하는 모든 팀에 대한 아키텍처 설계를 담당함.
2. 데이터 아키텍트(Data Architect, DA) : 전체 데이터에 대한 구조적 설계를 담당.
3. 시스템 아키텍트(System Architect, SA) : 특정 요구사항을 충족시키기 위해 소프트웨어와 하드웨어로 구성된 시스템의 아키텍처를 정의.
4. 테크니컬 아키텍트(Technical Architect, TA) : 프로젝트 전체 팀에 대한 하드웨어 및 네트워크 아키텍처를 설계.
5. 소프트웨어 아키텍트(Software Architect, SA) : 전문가로 간주되는 소프트웨어 개발자로서, 고수준의 설계적 결정을 수행하고 소프트웨어 코딩표준,도구,플랫폼을 포함한 기술표준을 지시.
6. 엔터프라이즈 아키텍트(Enterprise Architect,EA) : 비즈니스 아키텍처를 포함한 전체 아키텍처 설계에 대한 책임을 담당.
   (EA는 좀더 기술적측면에 집중하고 BA로 하여금 비즈니즈적 측면을 고려할 수 있도록 역할을 분담.)
7. 비즈니즈 아키텍트(Business Architect, BA) : 비즈니즈 영역에 대한 설계를 담당.
8. 애플리케이션 아키텍트(Application Architect,AA) : 업무 영역과 내부로직 설계를 담당.(인터페이스 및 업무 처리에 필요한 모듈설계 및 제작)


# 이식성 : 한번 만들어놓으면 어디에서라도 가동될 수 있는 소프트웨어의 특성을 이식성( Portability ) 라고 함.
# 상호운용성 : 다양한 조직이나 시스템과 연계되어 사용할 수 있는 소프트웨어 특성을 상호운용성 ( Interoperability ).


# Docker : 가상화 환경에서 애플리케이션을 관리/실행하기 위한 오픈소스 기반의 플랫폼. 온프레미스환경뿐만 아니라 다양한 클라우드 환경에서도 작동.
# 개발한 업무 애플리케이션을 실제 운영 환경에서 가동시키기 위해서는 다음과 같은 요소들이 필요.
-업무 애플리케이션 실행 모듈(프로그램 본체)/ 미들웨어와 라이브러리군 / OS,네트워크 등 인프라 설정
# Docker 는 이러한 요소들을 컨테이너에 통합하여 관리.
# 애플리케이션 개발자는 Docker를 사용해서 개발된 Web애플리케이션의 실행에 필요한 모든 것을 컨테이너에 모아 놓습니다. Docker가 설치되어 있는 환경이면 어디에서나 동작하기때문에,
# 개발/테스트 환경에서 동작하던 애플리케이션이 실제 운영환경에서는 동작하지않는 상황을 없앨 수 있습니다.
# Docker는 이식성이 높기 떄문에 클라우드와도 친화성이 높은 것이 특징.


## 가상화 기술
# 호스트(HOST) 가상화 : 하드웨어 위에 베이스가 되는 호스트 OS 를 설치하고 호스트 OS에 가상화 소프트웨어를 인스톨. 호스트가상화는 가상화소프트웨어 위에서 게스트OS 를 작동시키는 가상화.
# 호스트 OS 위에서 게스트 OS를 작동시키기 때문에, 오버헤드가 커집니다. *오버헤드 : 가상화를 실행시키기 위해서 필요이상의 CPU/디스크용량/메모리사용량 등이 발생하는 것.
ex) VirtualBox , VMware Player


# 하이퍼바이저 가상화 : 호스트OS 가 없는 하드웨어를 직접 제어하기때문에 리소스를 효율적으로 사용할 수 있습니다.
# 다만 가상환경마다 다른 OS가 동작하기 때문에 가상환경을 기동하기 위한 오버헤드가 커짐. 하이퍼바이저가상화는 펌웨어로 구현된 것이 많음.
ex) Hyper-V , XenServer 


# 컨테이너 가상화 : 호스트OS 상에 논리적인 구역(컨테이너)를 만들고,
# 애플리케이션을 동작하는 데 필요한 라이브러리와 애플리케이션 등을 컨테이너 안에 집어넣어 마치 개별 서버와 같이 쓸 수 있게 한 것.
# OS 자원을 논리적으로 분활하고 복수의 컨테이너에서 공유하여 사용. 오버헤드가 적어 가벼우며, 성능이 좋은것이 특징.
ex) FreeBSD Jails, Solaris Containers


## Docker 의 기능

1. Docker 이미지 생성
# 애플리케이션의 실행에 필요한 프로그램 본체/라이브러리/미들웨어/OS/네트워크설정 등을 1개의 묶음으로 하는 Docker 이미지를 만듬.
# 이미지는 도커의 명령어로 만들수 있고, Dockerfile 라는 코드에서 자동으로 만들수 있음. 
# 완성된 도커이미지는 실행환경에서 움직이는 컨테이너의 기반이 됨. 도커이미지는 애플리케이션을 실행하는데 필요한 파일들이 저장된 폴더.
# 도커명령어를 사용하면 이미지를 tar파일에 출력할수있음.

2. Docker 컨테이너의 실행
# 도커는 리눅스상에서 컨테이너단위로 서버기능을 수행. 도커이미지만 있으면 리눅스상에 도커가 설치된환경이면 어디에서든 컨테이너를 가동가능.
# 도커이미지 1개로부터 여러개의 컨테이너를 실행가능. 컨테이너를 기동/정지/파기할때는 도커명령어를 사용.

3. Docker 이미지 공유
# 도커레지스트리에서 일원화하여 관리할수 있음.





